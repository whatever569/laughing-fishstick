<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6210000: Last Updated: Mon Jun 10 11:25:52 2024
<BR><P>
<H3>Maximum Stack Usage =      33380 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; statemachine::StateMachine::transition(statemachine::Event) &rArr; statemachine::StateMachine::invokeOnEntry(statemachine::State) &rArr; S_ENDGAME_OnEntry() &rArr;  statemachine::StateMachine::transition(statemachine::Event) (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d7]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[126]">S_SETUP_OnEntry()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[118]">statemachine::StateMachine::transition(statemachine::Event)</a><BR>
 <LI><a href="#[115]">S_INIT_OnEntry()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[118]">statemachine::StateMachine::transition(statemachine::Event)</a><BR>
 <LI><a href="#[130]">S_ENDGAME_OnEntry()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[118]">statemachine::StateMachine::transition(statemachine::Event)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[15]">ADC0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[16]">CMP0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1f]">DAC0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[6]">DMA0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[7]">DMA1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[8]">DMA2_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[9]">DMA3_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[28]">DefaultISR</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(.text)
 <LI><a href="#[b]">FTFA_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[e]">I2C0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[f]">I2C1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[d]">LLWU_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[22]">LPTMR0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[c]">LVD_LVW_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[21]">MCG_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1c]">PIT_IRQHandler</a> from delay.o(.text.PIT_IRQHandler) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[24]">PORTA_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[25]">PORTD_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1b]">RTC_Seconds_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[a]">Reserved20_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1d]">Reserved39_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[23]">Reserved45_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[10]">SPI0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[11]">SPI1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[26]">SystemInit</a> from system_mkl25z4.o(.text.SystemInit) referenced from startup_mkl25z4.o(.text)
 <LI><a href="#[17]">TPM0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[18]">TPM1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[19]">TPM2_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[20]">TSI0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[12]">UART0_IRQHandler</a> from uart0.o(.text.UART0_IRQHandler) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from gps.o(.text.UART1_IRQHandler) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[14]">UART2_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1e]">USB0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[41]">_GLOBAL__sub_I_S_HOT_COLD.cpp</a> from s_hot_cold.o(.text._GLOBAL__sub_I_S_HOT_COLD.cpp) referenced from s_hot_cold.o(.init_array)
 <LI><a href="#[42]">_GLOBAL__sub_I_S_WAYPOINT.cpp</a> from s_waypoint.o(.text._GLOBAL__sub_I_S_WAYPOINT.cpp) referenced from s_waypoint.o(.init_array)
 <LI><a href="#[2f]">switchToNextStateSSEARCH()</a> from s_qrcode.o(.text._Z24switchToNextStateSSEARCHv) referenced from s_qrcode.o(.text._Z16S_QRCODE_OnEntryv)
 <LI><a href="#[30]">showDir()</a> from s_search.o(.text._Z7showDirv) referenced from s_search.o(.text._Z16S_SEARCH_OnEntryv)
 <LI><a href="#[37]">Display::clearScreen()</a> from display.o(.text._ZN7Display11clearScreenEv) referenced from s_search.o(.text._Z7showDirv)
 <LI><a href="#[35]">Display::showLoading()</a> from display.o(.text._ZN7Display11showLoadingEv) referenced from s_hot_cold.o(.text._Z21timerInterruptHotColdv)
 <LI><a href="#[38]">Display::showUpArrow()</a> from display.o(.text._ZN7Display11showUpArrowEv) referenced from s_search.o(.text._Z7showDirv)
 <LI><a href="#[36]">Display::showDownArrow()</a> from display.o(.text._ZN7Display13showDownArrowEv) referenced from s_search.o(.text._Z7showDirv)
 <LI><a href="#[3a]">Display::showLeftArrow()</a> from display.o(.text._ZN7Display13showLeftArrowEv) referenced from s_search.o(.text._Z7showDirv)
 <LI><a href="#[43]">Display::showINITScreen()</a> from display.o(.text._ZN7Display14showINITScreenEv) referenced from display.o(.data._ZN7Display12returnScreenE)
 <LI><a href="#[39]">Display::showRightArrow()</a> from display.o(.text._ZN7Display14showRightArrowEv) referenced from s_search.o(.text._Z7showDirv)
 <LI><a href="#[34]">Display::showS_HOT_COLDNotCloseAnymore()</a> from display.o(.text._ZN7Display29showS_HOT_COLDNotCloseAnymoreEv) referenced from s_hot_cold.o(.text._Z21timerInterruptHotColdv)
 <LI><a href="#[32]">Display::showS_WAYPOINT_SimonSaysPuzzlePrompt()</a> from display.o(.text._ZN7Display36showS_WAYPOINT_SimonSaysPuzzlePromptEv) referenced from s_waypoint.o(.text._Z18S_WAYPOINT_OnEntryv)
 <LI><a href="#[33]">Display::showS_WAYPOINT_SimonSaysControlsTutorial()</a> from display.o(.text._ZN7Display40showS_WAYPOINT_SimonSaysControlsTutorialEv) referenced from s_waypoint.o(.text._Z18S_WAYPOINT_OnEntryv)
 <LI><a href="#[31]">Controls::doNothing()</a> from s_qrcode.o(.text._ZN8Controls9doNothingEv) referenced from s_waypoint.o(.text._Z18S_WAYPOINT_OnEntryv)
 <LI><a href="#[3b]">std::__2::unique_ptr&lang;SimonSaysGame, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::~unique_ptr__sub_object[abi:v180000]()</a> from s_waypoint.o(.text._ZNSt3__210unique_ptrI13SimonSaysGameNS_14default_deleteIS1_EEED2B7v180000Ev) referenced from s_waypoint.o(.text.__cxx_global_var_init)
 <LI><a href="#[27]">__main</a> from __main.o(!!!main) referenced from startup_mkl25z4.o(.text)
 <LI><a href="#[2a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[3c]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[3d]">_printf_fp_hex_real</a> from _printf_fp_hex.o(.text) referenced from printf2.o(x$fpl$printf2)
 <LI><a href="#[2b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2d]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[3f]">_scanf_really_hex_real</a> from scanf_hexfp.o(.text) referenced from scanf2.o(x$fpl$scanf2)
 <LI><a href="#[40]">_scanf_really_infnan</a> from scanf_infnan.o(.text) referenced from scanf2.o(x$fpl$scanf2)
 <LI><a href="#[3e]">_scanf_really_real</a> from scanf_fp.o(.text) referenced from scanf1.o(x$fpl$scanf1)
 <LI><a href="#[2c]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[29]">_sputc</a> from _sputc.o(.text) referenced from sprintf.o(.text)
 <LI><a href="#[2e]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[27]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[47]"></a>__scatterload_rt2</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1a1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a2]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[48]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1a3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[1a4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b8]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[49]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_n &rArr; _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[4a]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[4c]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[4e]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[50]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[51]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[52]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[54]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[55]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[57]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[58]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[59]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[5b]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[5d]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[5f]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[60]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>

<P><STRONG><a name="[61]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[63]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[65]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>

<P><STRONG><a name="[66]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[68]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[6a]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[6c]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[7b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[70]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[72]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[73]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[75]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[80]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[76]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1bb]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1bc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1bd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1be]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1bf]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1c0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1c1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[46]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1c2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[78]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1c3]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[7c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 33380 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; statemachine::StateMachine::transition(statemachine::Event) &rArr; statemachine::StateMachine::invokeOnEntry(statemachine::State) &rArr; S_ENDGAME_OnEntry() &rArr;  statemachine::StateMachine::transition(statemachine::Event) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1c4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[e3]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1c5]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[81]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1c6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>FTFA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>LLWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Reserved39_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TPM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TPM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TPM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mkl25z4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[83]"></a>sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ERROR_OnEntry()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SETUP_OnEntry()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_INIT_OnEntry()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ENDGAME_OnEntry()
</UL>

<P><STRONG><a name="[85]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataInit()
</UL>

<P><STRONG><a name="[89]"></a>__cxa_atexit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[8b]"></a>strtok</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = strtok &rArr; __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps
</UL>

<P><STRONG><a name="[148]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr[abi:v180000](char*, int) [enable_if:true]
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps
</UL>

<P><STRONG><a name="[178]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps
</UL>

<P><STRONG><a name="[1c7]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps
</UL>

<P><STRONG><a name="[101]"></a>strcpy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataInit()
</UL>

<P><STRONG><a name="[112]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataReturn()
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawbitmap(unsigned char const*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataReturn()
</UL>

<P><STRONG><a name="[1cf]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[8f]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clearscreen()
</UL>

<P><STRONG><a name="[94]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[1d0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[93]"></a>strncpy</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps
</UL>

<P><STRONG><a name="[1d2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putchar(char)
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__aeabi_idivmod</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[44]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::getDirection(GPSLocation const&)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[1d4]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::distanceTo(GPSLocation const&) const
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[95]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::getDirection(GPSLocation const&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::distanceTo(GPSLocation const&) const
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[98]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[99]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::radians(double)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::distanceTo(GPSLocation const&) const
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[9b]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[9a]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataReturn()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataInit()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1d5]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1d6]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::radians(double)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::distanceTo(GPSLocation const&) const
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1d7]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ERROR_OnEntry()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ENDGAME_OnEntry()
</UL>

<P><STRONG><a name="[1d8]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ERROR_OnEntry()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ENDGAME_OnEntry()
</UL>

<P><STRONG><a name="[a0]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[9f]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ERROR_OnEntry()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ENDGAME_OnEntry()
</UL>

<P><STRONG><a name="[1d9]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[1da]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1db]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[a7]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[a8]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[a9]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[ab]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[ac]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[ad]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ae]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[aa]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[56]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[4b]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[84]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>

<P><STRONG><a name="[29]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sprintf.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[5e]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[b5]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[5a]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[62]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[b6]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[5c]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[64]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[4d]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[b1]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[87]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[bc]"></a>__strtod_int</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_atexit</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[8c]"></a>__strtok_internal</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, strtok_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>

<P><STRONG><a name="[19e]"></a>_dsqrt</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1dd]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1de]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[71]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[bd]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1df]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[c1]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[6f]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[c3]"></a>__Heap_Initialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1e1]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3c]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[3d]"></a>_printf_fp_hex_real</STRONG> (Thumb, 718 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf2.o(x$fpl$printf2)
</UL>
<P><STRONG><a name="[cc]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[67]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[69]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[ce]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[6b]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[6d]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[b9]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[2c]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>_c16rtomb</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[b3]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[77]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[bf]"></a>strcspn</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[be]"></a>strspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[af]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[d1]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1e2]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[d4]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[79]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[c0]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[ca]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3e]"></a>_scanf_really_real</STRONG> (Thumb, 710 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf1.o(x$fpl$scanf1)
</UL>
<P><STRONG><a name="[c5]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c6]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c8]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[da]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _btod_emuld &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[c7]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[db]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_edivd &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[7e]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c2]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[19f]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[d2]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[d3]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[d5]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[82]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[1e3]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1e5]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e4]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e6]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[3f]"></a>_scanf_really_hex_real</STRONG> (Thumb, 806 bytes, Stack size 72 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _scanf_really_hex_real &rArr; __mathlib_narrow &rArr; __mathlib_tofloat &rArr; frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf2.o(x$fpl$scanf2)
</UL>
<P><STRONG><a name="[40]"></a>_scanf_really_infnan</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf2.o(x$fpl$scanf2)
</UL>
<P><STRONG><a name="[e7]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[ea]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1c]"></a>PIT_IRQHandler</STRONG> (Thumb, 204 bytes, Stack size 96 bytes, delay.o(.text.PIT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 33148 + Unknown Stack Size
<LI>Call Chain = PIT_IRQHandler &rArr; interruptFunctionS_SEARCH() &rArr; statemachine::StateMachine::transition(statemachine::Event) &rArr; statemachine::StateMachine::invokeOnEntry(statemachine::State) &rArr; S_ENDGAME_OnEntry() &rArr;  statemachine::StateMachine::transition(statemachine::Event) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptFunctionS_SEARCH()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInterruptHotCold()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_string(unsigned short, char const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SystemInit</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, system_mkl25z4.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>UART0_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, uart0.o(.text.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART0_IRQHandler &rArr; q_dequeue &rArr; q_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_dequeue
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gps.o(.text.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART1_IRQHandler &rArr; q_enqueue &rArr; q_full
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>eeprom_init()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, at24c256.o(.text._Z11eeprom_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eeprom_init()
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeModules()
</UL>

<P><STRONG><a name="[f8]"></a>eeprom_read(unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, at24c256.o(.text._Z11eeprom_readtPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = eeprom_read(unsigned short, unsigned char*, unsigned short) &rArr; i2c0_read
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0_read
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_string(unsigned short, char*)
</UL>

<P><STRONG><a name="[fa]"></a>GameDataInit()</STRONG> (Thumb, 360 bytes, Stack size 192 bytes, datamc.o(.text._Z12GameDataInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GameDataInit() &rArr; GameData::WayPoint::setWayPoint(GPSLocation, GameData::Puzzle) &rArr; GPSLocation::setCoordinates(double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameData::WayPoint::setWayPoint(GPSLocation, GameData::Puzzle)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::GPSLocation__sub_object(double, double)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms(int)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_put_char
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_get_char
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_num_rx_chars_available
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_get_string
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_INIT_OnEntry()
</UL>

<P><STRONG><a name="[106]"></a>eeprom_flush()</STRONG> (Thumb, 60 bytes, Stack size 32792 bytes, at24c256.o(.text._Z12eeprom_flushv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32876<LI>Call Chain = eeprom_flush() &rArr; eeprom_write(unsigned short, unsigned char const*, unsigned short) &rArr; i2c0_write
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write(unsigned short, unsigned char const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ENDGAME_OnEntry()
</UL>

<P><STRONG><a name="[107]"></a>eeprom_write(unsigned short, unsigned char const*, unsigned short)</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, at24c256.o(.text._Z12eeprom_writetPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = eeprom_write(unsigned short, unsigned char const*, unsigned short) &rArr; i2c0_write
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(int)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_string(unsigned short, char const*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_flush()
</UL>

<P><STRONG><a name="[10a]"></a>millis_setup()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, delay.o(.text._Z12millis_setupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = millis_setup() &rArr; __NVIC_SetPriority(IRQn, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeModules()
</UL>

<P><STRONG><a name="[137]"></a>ssd1306_goto(unsigned char, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssd1306.o(.text._Z12ssd1306_gotohh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssd1306_goto(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring(unsigned char, unsigned char, char const*)
</UL>

<P><STRONG><a name="[10d]"></a>ssd1306_init()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ssd1306.o(.text._Z12ssd1306_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssd1306_init() &rArr; i2c1_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_write_cmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_setorientation(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::displayInit()
</UL>

<P><STRONG><a name="[110]"></a>GameDataReturn()</STRONG> (Thumb, 172 bytes, Stack size 88 bytes, datamc.o(.text._Z14GameDataReturnv))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = GameDataReturn() &rArr; eeprom_read_string(unsigned short, char*) &rArr; eeprom_read(unsigned short, unsigned char*, unsigned short) &rArr; i2c0_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms(int)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_put_char
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_get_char
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_num_rx_chars_available
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_send_string
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_string(unsigned short, char*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ERROR_OnEntry()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ENDGAME_OnEntry()
</UL>

<P><STRONG><a name="[115]"></a>S_INIT_OnEntry()</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, s_init.o(.text._Z14S_INIT_OnEntryv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = S_INIT_OnEntry() &rArr;  statemachine::StateMachine::transition(statemachine::Event) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::setErrorSource(statemachine::Event)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showINITScreen()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeModules()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::transition(statemachine::Event)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataInit()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_string(unsigned short, char const*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::invokeOnEntry(statemachine::State)
</UL>

<P><STRONG><a name="[119]"></a>ssd1306_update()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ssd1306.o(.text._Z14ssd1306_updatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssd1306_update() &rArr; ssd1306_init() &rArr; i2c1_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_write_data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_write_cmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_setfont(char const*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_init()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_WAYPOINT_SimonSaysControlsTutorial()
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_WAYPOINT_SimonSaysPuzzlePrompt()
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showLeftArrow()
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showRightArrow()
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showUpArrow()
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showDownArrow()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showSEARCHScreen()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showQRCODEScreen()
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showINITScreen()
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showLoading()
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDNotCloseAnymore()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDHotStatus()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDWarmStatus()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDColdStatus()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDVeryColdStatus()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ERROR_ERROR_INIT()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ERROR_ERROR_DURING_GAME()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ERROR_ERROR_SENDING_DATA_AT_S_ENDGAME()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ERROR_NO_SOURCE()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ENDGAMEGameEndedBecauseAllWaypointsWereReached()
</UL>

<P><STRONG><a name="[11c]"></a>S_ERROR_OnEntry()</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, s_error.o(.text._Z15S_ERROR_OnEntryv))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = S_ERROR_OnEntry() &rArr; GameDataReturn() &rArr; eeprom_read_string(unsigned short, char*) &rArr; eeprom_read(unsigned short, unsigned char*, unsigned short) &rArr; i2c0_read
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ERROR_ERROR_INIT()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameData::WayPoint::getIsPuzzleSuccess()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameData::WayPoint::getIsReached()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ERROR_ERROR_DURING_GAME()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ERROR_ERROR_SENDING_DATA_AT_S_ENDGAME()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ERROR_NO_SOURCE()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::getErrorSource()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataReturn()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_string(unsigned short, char const*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::invokeOnEntry(statemachine::State)
</UL>

<P><STRONG><a name="[126]"></a>S_SETUP_OnEntry()</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, s_setup.o(.text._Z15S_SETUP_OnEntryv))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = S_SETUP_OnEntry() &rArr;  statemachine::StateMachine::transition(statemachine::Event) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showLoading()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::transition(statemachine::Event)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_string(unsigned short, char const*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::invokeOnEntry(statemachine::State)
</UL>

<P><STRONG><a name="[127]"></a>ssd1306_putchar(char)</STRONG> (Thumb, 384 bytes, Stack size 88 bytes, ssd1306.o(.text._Z15ssd1306_putcharc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ssd1306_putchar(char) &rArr; ssd1306_setpixel(unsigned char, unsigned char, pixel_value_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_setpixel(unsigned char, unsigned char, pixel_value_t)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring(unsigned char, unsigned char, char const*)
</UL>

<P><STRONG><a name="[11b]"></a>ssd1306_setfont(char const*)</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ssd1306.o(.text._Z15ssd1306_setfontPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ssd1306_setfont(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::displayInit()
</UL>

<P><STRONG><a name="[12a]"></a>S_QRCODE_OnEntry()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, s_qrcode.o(.text._Z16S_QRCODE_OnEntryv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = S_QRCODE_OnEntry() &rArr; Display::showQRCODEScreen() &rArr; ssd1306_update() &rArr; ssd1306_init() &rArr; i2c1_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controls::setFunctionsForButtons(void (*)(), void (*)(), void (*)(), void (*)())
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showQRCODEScreen()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::invokeOnEntry(statemachine::State)
</UL>

<P><STRONG><a name="[12d]"></a>S_SEARCH_OnEntry()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, s_search.o(.text._Z16S_SEARCH_OnEntryv))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = S_SEARCH_OnEntry() &rArr; Display::showSEARCHScreen() &rArr; ssd1306_putstring(unsigned char, unsigned char, char const*) &rArr; ssd1306_putchar(char) &rArr; ssd1306_setpixel(unsigned char, unsigned char, pixel_value_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_setup()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showSEARCHScreen()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controls::setFunctionsForButtons(void (*)(), void (*)(), void (*)(), void (*)())
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::invokeOnEntry(statemachine::State)
</UL>

<P><STRONG><a name="[129]"></a>ssd1306_setpixel(unsigned char, unsigned char, pixel_value_t)</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, ssd1306.o(.text._Z16ssd1306_setpixelhh13pixel_value_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ssd1306_setpixel(unsigned char, unsigned char, pixel_value_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putchar(char)
</UL>

<P><STRONG><a name="[130]"></a>S_ENDGAME_OnEntry()</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, s_endgame.o(.text._Z17S_ENDGAME_OnEntryv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32908 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = S_ENDGAME_OnEntry() &rArr;  statemachine::StateMachine::transition(statemachine::Event) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::transition(statemachine::Event)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ENDGAMEGameEndedBecauseAllWaypointsWereReached()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataReturn()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_string(unsigned short, char const*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_flush()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::invokeOnEntry(statemachine::State)
</UL>

<P><STRONG><a name="[116]"></a>initializeModules()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, initializers.o(.text._Z17initializeModulesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = initializeModules() &rArr; Display::displayInit() &rArr; ssd1306_setorientation(unsigned char) &rArr; ssd1306_init() &rArr; i2c1_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::displayInit()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_setup()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_setup()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_INIT_OnEntry()
</UL>

<P><STRONG><a name="[136]"></a>ssd1306_putstring(unsigned char, unsigned char, char const*)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ssd1306.o(.text._Z17ssd1306_putstringhhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ssd1306_putstring(unsigned char, unsigned char, char const*) &rArr; ssd1306_putchar(char) &rArr; ssd1306_setpixel(unsigned char, unsigned char, pixel_value_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putchar(char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_goto(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_WAYPOINT_SimonSaysPuzzlePrompt()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showSEARCHScreen()
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showINITScreen()
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showLoading()
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDNotCloseAnymore()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ERROR_ERROR_INIT()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ERROR_ERROR_DURING_GAME()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ERROR_ERROR_SENDING_DATA_AT_S_ENDGAME()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ERROR_NO_SOURCE()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ENDGAMEGameEndedBecauseAllWaypointsWereReached()
</UL>

<P><STRONG><a name="[138]"></a>S_HOT_COLD_OnEntry()</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, s_hot_cold.o(.text._Z18S_HOT_COLD_OnEntryv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = S_HOT_COLD_OnEntry() &rArr; GameData::WayPoint::getLocation()
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameData::WayPoint::getLocation()
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::invokeOnEntry(statemachine::State)
</UL>

<P><STRONG><a name="[13a]"></a>S_WAYPOINT_OnEntry()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, s_waypoint.o(.text._Z18S_WAYPOINT_OnEntryv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = S_WAYPOINT_OnEntry() &rArr; Controls::setFunctionsForButtons(void (*)(), void (*)(), void (*)(), void (*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controls::setFunctionsForButtons(void (*)(), void (*)(), void (*)(), void (*)())
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showScreenForNSeconds(long, void (*)(), void (*)())
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::invokeOnEntry(statemachine::State)
</UL>

<P><STRONG><a name="[111]"></a>eeprom_read_string(unsigned short, char*)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at24c256.o(.text._Z18eeprom_read_stringtPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = eeprom_read_string(unsigned short, char*) &rArr; eeprom_read(unsigned short, unsigned char*, unsigned short) &rArr; i2c0_read
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read(unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataReturn()
</UL>

<P><STRONG><a name="[13c]"></a>ssd1306_drawbitmap(unsigned char const*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssd1306.o(.text._Z18ssd1306_drawbitmapPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssd1306_drawbitmap(unsigned char const*) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_WAYPOINT_SimonSaysControlsTutorial()
</UL>

<P><STRONG><a name="[159]"></a>ssd1306_drawbitmap(unsigned char, unsigned char const*, unsigned char)</STRONG> (Thumb, 120 bytes, Stack size 36 bytes, ssd1306.o(.text._Z18ssd1306_drawbitmaphPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ssd1306_drawbitmap(unsigned char, unsigned char const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showLeftArrow()
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showRightArrow()
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showUpArrow()
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showDownArrow()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showQRCODEScreen()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDHotStatus()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDWarmStatus()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDColdStatus()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDVeryColdStatus()
</UL>

<P><STRONG><a name="[ef]"></a>eeprom_write_string(unsigned short, char const*)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, at24c256.o(.text._Z19eeprom_write_stringtPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = eeprom_write_string(unsigned short, char const*) &rArr; eeprom_write(unsigned short, unsigned char const*, unsigned short) &rArr; i2c0_write
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write(unsigned short, unsigned char const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ERROR_OnEntry()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SETUP_OnEntry()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_INIT_OnEntry()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ENDGAME_OnEntry()
</UL>

<P><STRONG><a name="[13d]"></a>ssd1306_clearscreen()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ssd1306.o(.text._Z19ssd1306_clearscreenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssd1306_clearscreen()
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showQRCODEScreen()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>

<P><STRONG><a name="[ec]"></a>timerInterruptHotCold()</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, s_hot_cold.o(.text._Z21timerInterruptHotColdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 33020 + Unknown Stack Size
<LI>Call Chain = timerInterruptHotCold() &rArr; statemachine::StateMachine::transition(statemachine::Event) &rArr; statemachine::StateMachine::invokeOnEntry(statemachine::State) &rArr; S_ENDGAME_OnEntry() &rArr;  statemachine::StateMachine::transition(statemachine::Event) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameData::WayPoint::setIsReached(bool)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDHotStatus()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDWarmStatus()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDColdStatus()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDVeryColdStatus()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showScreenForNSeconds(long, void (*)(), void (*)())
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::distanceTo(GPSLocation const&) const
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User::getUsersCurrentLocation()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::transition(statemachine::Event)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>generaterandom32bitint(unsigned int, int, GPIO_Type*, int, PORT_Type*)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, randomnumbergenerator.o(.text._Z22generaterandom32bitintjiP9GPIO_TypeiP9PORT_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = generaterandom32bitint(unsigned int, int, GPIO_Type*, int, PORT_Type*)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimonSaysGame::initDirs()
</UL>

<P><STRONG><a name="[145]"></a>ssd1306_setorientation(unsigned char)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ssd1306.o(.text._Z22ssd1306_setorientationh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ssd1306_setorientation(unsigned char) &rArr; ssd1306_init() &rArr; i2c1_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_write_cmd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_init()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::displayInit()
</UL>

<P><STRONG><a name="[2f]"></a>switchToNextStateSSEARCH()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, s_qrcode.o(.text._Z24switchToNextStateSSEARCHv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32980 + Unknown Stack Size
<LI>Call Chain = switchToNextStateSSEARCH() &rArr; statemachine::StateMachine::transition(statemachine::Event) &rArr; statemachine::StateMachine::invokeOnEntry(statemachine::State) &rArr; S_ENDGAME_OnEntry() &rArr;  statemachine::StateMachine::transition(statemachine::Event) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::transition(statemachine::Event)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_qrcode.o(.text._Z16S_QRCODE_OnEntryv)
</UL>
<P><STRONG><a name="[ed]"></a>interruptFunctionS_SEARCH()</STRONG> (Thumb, 124 bytes, Stack size 80 bytes, s_search.o(.text._Z25interruptFunctionS_SEARCHv))
<BR><BR>[Stack]<UL><LI>Max Depth = 33052 + Unknown Stack Size
<LI>Call Chain = interruptFunctionS_SEARCH() &rArr; statemachine::StateMachine::transition(statemachine::Event) &rArr; statemachine::StateMachine::invokeOnEntry(statemachine::State) &rArr; S_ENDGAME_OnEntry() &rArr;  statemachine::StateMachine::transition(statemachine::Event) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::distanceTo(GPSLocation const&) const
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User::getUsersCurrentLocation()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameData::WayPoint::getLocation()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::transition(statemachine::Event)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>strchr[abi:v180000](char*, int) [enable_if:true]</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, s_hot_cold.o(.text._Z6strchrB7v180000Ua9enable_ifILb1EEPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strchr[abi:v180000](char*, int) [enable_if:true]
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User::getUsersCurrentLocation()
</UL>

<P><STRONG><a name="[30]"></a>showDir()</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, s_search.o(.text._Z7showDirv))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = showDir() &rArr; User::getUsersCurrentLocation() &rArr; gps &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::getDirection(GPSLocation const&)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showScreenForNSeconds(long, void (*)(), void (*)())
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User::getUsersCurrentLocation()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameData::WayPoint::getLocation()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_search.o(.text._Z16S_SEARCH_OnEntryv)
</UL>
<P><STRONG><a name="[ff]"></a>delay_ms(int)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, delay.o(.text._Z8delay_msi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataReturn()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataInit()
</UL>

<P><STRONG><a name="[108]"></a>delay_us(int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, delay.o(.text._Z8delay_usi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_us(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_setorientation(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write(unsigned short, unsigned char const*, unsigned short)
</UL>

<P><STRONG><a name="[12f]"></a>PIT_setup()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, delay.o(.text._Z9PIT_setupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PIT_setup() &rArr; __NVIC_SetPriority(IRQn, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeModules()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SEARCH_OnEntry()
</UL>

<P><STRONG><a name="[149]"></a>GPSLocation::getDirection(GPSLocation const&)</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, s_search.o(.text._ZN11GPSLocation12getDirectionERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPSLocation::getDirection(GPSLocation const&) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__math::fabs[abi:v180000](float)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showDir()
</UL>

<P><STRONG><a name="[157]"></a>GPSLocation::setCoordinates(double, double)</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, datamc.o(.text._ZN11GPSLocation14setCoordinatesEdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPSLocation::setCoordinates(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User::getUsersCurrentLocation()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameData::WayPoint::setWayPoint(GPSLocation, GameData::Puzzle)
</UL>

<P><STRONG><a name="[158]"></a>GPSLocation::setIsConnected(bool)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, s_hot_cold.o(.text._ZN11GPSLocation14setIsConnectedEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPSLocation::setIsConnected(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User::getUsersCurrentLocation()
</UL>

<P><STRONG><a name="[14e]"></a>GPSLocation::radians(double)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, s_hot_cold.o(.text._ZN11GPSLocation7radiansEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPSLocation::radians(double) &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::distanceTo(GPSLocation const&) const
</UL>

<P><STRONG><a name="[104]"></a>GPSLocation::GPSLocation__sub_object(double, double)</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, datamc.o(.text._ZN11GPSLocationC2Edd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPSLocation::GPSLocation__sub_object(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameData::WayPoint::WayPoint__sub_object()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User::getUsersCurrentLocation()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataInit()
</UL>

<P><STRONG><a name="[118]"></a>statemachine::StateMachine::transition(statemachine::Event)</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, s_endgame.o(.text._ZN12statemachine12StateMachine10transitionENS_5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32972 + Unknown Stack Size
<LI>Call Chain = statemachine::StateMachine::transition(statemachine::Event) &rArr; statemachine::StateMachine::invokeOnEntry(statemachine::State) &rArr; S_ENDGAME_OnEntry() &rArr;  statemachine::StateMachine::transition(statemachine::Event) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::invokeOnEntry(statemachine::State)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptFunctionS_SEARCH()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToNextStateSSEARCH()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInterruptHotCold()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SETUP_OnEntry()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_INIT_OnEntry()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ENDGAME_OnEntry()
</UL>

<P><STRONG><a name="[151]"></a>statemachine::StateMachine::invokeOnEntry(statemachine::State)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, s_endgame.o(.text._ZN12statemachine12StateMachine13invokeOnEntryENS_5StateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32932 + Unknown Stack Size
<LI>Call Chain = statemachine::StateMachine::invokeOnEntry(statemachine::State) &rArr; S_ENDGAME_OnEntry() &rArr;  statemachine::StateMachine::transition(statemachine::Event) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ERROR_OnEntry()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SETUP_OnEntry()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_WAYPOINT_OnEntry()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_HOT_COLD_OnEntry()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SEARCH_OnEntry()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QRCODE_OnEntry()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_INIT_OnEntry()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ENDGAME_OnEntry()
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::transition(statemachine::Event)
</UL>

<P><STRONG><a name="[11d]"></a>statemachine::StateMachine::getErrorSource()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, s_error.o(.text._ZN12statemachine12StateMachine14getErrorSourceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = statemachine::StateMachine::getErrorSource()
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ERROR_OnEntry()
</UL>

<P><STRONG><a name="[117]"></a>statemachine::StateMachine::setErrorSource(statemachine::Event)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, s_init.o(.text._ZN12statemachine12StateMachine14setErrorSourceENS_5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = statemachine::StateMachine::setErrorSource(statemachine::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_INIT_OnEntry()
</UL>

<P><STRONG><a name="[152]"></a>SimonSaysGame::initDirs()</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, s_waypoint.o(.text._ZN13SimonSaysGame8initDirsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SimonSaysGame::initDirs() &rArr; std::__2::array&lang;GPSLocation::Direction, 10u&rang;::fill[abi:v180000](GPSLocation::Direction const&) &rArr; GPSLocation::Direction* std::__2::fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&) &rArr; GPSLocation::Direction* std::__2::__fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;GPSLocation::Direction, 10u&rang;::fill[abi:v180000](GPSLocation::Direction const&)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generaterandom32bitint(unsigned int, int, GPIO_Type*, int, PORT_Type*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;GPSLocation::Direction, 10u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimonSaysGame::SimonSaysGame__sub_object(int)
</UL>

<P><STRONG><a name="[156]"></a>SimonSaysGame::SimonSaysGame__sub_object(int)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, s_waypoint.o(.text._ZN13SimonSaysGameC2Ei))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SimonSaysGame::SimonSaysGame__sub_object(int) &rArr; SimonSaysGame::initDirs() &rArr; std::__2::array&lang;GPSLocation::Direction, 10u&rang;::fill[abi:v180000](GPSLocation::Direction const&) &rArr; GPSLocation::Direction* std::__2::fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&) &rArr; GPSLocation::Direction* std::__2::__fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimonSaysGame::initDirs()
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[13e]"></a>User::getUsersCurrentLocation()</STRONG> (Thumb, 156 bytes, Stack size 96 bytes, s_hot_cold.o(.text._ZN4User23getUsersCurrentLocationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = User::getUsersCurrentLocation() &rArr; gps &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::setIsConnected(bool)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr[abi:v180000](char*, int) [enable_if:true]
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::setCoordinates(double, double)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::GPSLocation__sub_object(double, double)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptFunctionS_SEARCH()
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showDir()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInterruptHotCold()
</UL>

<P><STRONG><a name="[17e]"></a>User::User__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, main.o(.text._ZN4UserC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = User::User__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>Display::clearScreen()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, display.o(.text._ZN7Display11clearScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Display::clearScreen() &rArr; ssd1306_clearscreen()
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clearscreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_WAYPOINT_SimonSaysControlsTutorial()
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_WAYPOINT_SimonSaysPuzzlePrompt()
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showLeftArrow()
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showRightArrow()
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showUpArrow()
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showDownArrow()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showSEARCHScreen()
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showINITScreen()
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showLoading()
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDNotCloseAnymore()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDHotStatus()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDWarmStatus()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDColdStatus()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_HOT_COLDVeryColdStatus()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInterruptHotCold()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ERROR_ERROR_INIT()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ERROR_ERROR_DURING_GAME()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ERROR_ERROR_SENDING_DATA_AT_S_ENDGAME()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ERROR_NO_SOURCE()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ERROR_OnEntry()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SETUP_OnEntry()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_WAYPOINT_OnEntry()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SEARCH_OnEntry()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QRCODE_OnEntry()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_INIT_OnEntry()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::showS_ENDGAMEGameEndedBecauseAllWaypointsWereReached()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ENDGAME_OnEntry()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_search.o(.text._Z7showDirv)
</UL>
<P><STRONG><a name="[135]"></a>Display::displayInit()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, display.o(.text._ZN7Display11displayInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Display::displayInit() &rArr; ssd1306_setorientation(unsigned char) &rArr; ssd1306_init() &rArr; i2c1_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_setfont(char const*)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_setorientation(unsigned char)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeModules()
</UL>

<P><STRONG><a name="[35]"></a>Display::showLoading()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(.text._ZN7Display11showLoadingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Display::showLoading() &rArr; ssd1306_putstring(unsigned char, unsigned char, char const*) &rArr; ssd1306_putchar(char) &rArr; ssd1306_setpixel(unsigned char, unsigned char, pixel_value_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring(unsigned char, unsigned char, char const*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SETUP_OnEntry()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_hot_cold.o(.text._Z21timerInterruptHotColdv)
</UL>
<P><STRONG><a name="[38]"></a>Display::showUpArrow()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(.text._ZN7Display11showUpArrowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display::showUpArrow() &rArr; ssd1306_update() &rArr; ssd1306_init() &rArr; i2c1_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawbitmap(unsigned char, unsigned char const*, unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_search.o(.text._Z7showDirv)
</UL>
<P><STRONG><a name="[36]"></a>Display::showDownArrow()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(.text._ZN7Display13showDownArrowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display::showDownArrow() &rArr; ssd1306_update() &rArr; ssd1306_init() &rArr; i2c1_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawbitmap(unsigned char, unsigned char const*, unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_search.o(.text._Z7showDirv)
</UL>
<P><STRONG><a name="[3a]"></a>Display::showLeftArrow()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(.text._ZN7Display13showLeftArrowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display::showLeftArrow() &rArr; ssd1306_update() &rArr; ssd1306_init() &rArr; i2c1_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawbitmap(unsigned char, unsigned char const*, unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_search.o(.text._Z7showDirv)
</UL>
<P><STRONG><a name="[43]"></a>Display::showINITScreen()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, display.o(.text._ZN7Display14showINITScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Display::showINITScreen() &rArr; ssd1306_putstring(unsigned char, unsigned char, char const*) &rArr; ssd1306_putchar(char) &rArr; ssd1306_setpixel(unsigned char, unsigned char, pixel_value_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring(unsigned char, unsigned char, char const*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_INIT_OnEntry()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.data._ZN7Display12returnScreenE)
</UL>
<P><STRONG><a name="[39]"></a>Display::showRightArrow()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(.text._ZN7Display14showRightArrowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display::showRightArrow() &rArr; ssd1306_update() &rArr; ssd1306_init() &rArr; i2c1_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawbitmap(unsigned char, unsigned char const*, unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_search.o(.text._Z7showDirv)
</UL>
<P><STRONG><a name="[12b]"></a>Display::showQRCODEScreen()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(.text._ZN7Display16showQRCODEScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display::showQRCODEScreen() &rArr; ssd1306_update() &rArr; ssd1306_init() &rArr; i2c1_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawbitmap(unsigned char, unsigned char const*, unsigned char)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clearscreen()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QRCODE_OnEntry()
</UL>

<P><STRONG><a name="[12e]"></a>Display::showSEARCHScreen()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, display.o(.text._ZN7Display16showSEARCHScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Display::showSEARCHScreen() &rArr; ssd1306_putstring(unsigned char, unsigned char, char const*) &rArr; ssd1306_putchar(char) &rArr; ssd1306_setpixel(unsigned char, unsigned char, pixel_value_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring(unsigned char, unsigned char, char const*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SEARCH_OnEntry()
</UL>

<P><STRONG><a name="[11e]"></a>Display::showS_ERROR_NO_SOURCE()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, display.o(.text._ZN7Display21showS_ERROR_NO_SOURCEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Display::showS_ERROR_NO_SOURCE() &rArr; ssd1306_putstring(unsigned char, unsigned char, char const*) &rArr; ssd1306_putchar(char) &rArr; ssd1306_setpixel(unsigned char, unsigned char, pixel_value_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring(unsigned char, unsigned char, char const*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ERROR_OnEntry()
</UL>

<P><STRONG><a name="[13b]"></a>Display::showScreenForNSeconds(long, void (*)(), void (*)())</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, display.o(.text._ZN7Display21showScreenForNSecondsElPFvvES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Display::showScreenForNSeconds(long, void (*)(), void (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showDir()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInterruptHotCold()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_WAYPOINT_OnEntry()
</UL>

<P><STRONG><a name="[123]"></a>Display::showS_ERROR_ERROR_INIT()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, display.o(.text._ZN7Display22showS_ERROR_ERROR_INITEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Display::showS_ERROR_ERROR_INIT() &rArr; ssd1306_putstring(unsigned char, unsigned char, char const*) &rArr; ssd1306_putchar(char) &rArr; ssd1306_setpixel(unsigned char, unsigned char, pixel_value_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring(unsigned char, unsigned char, char const*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ERROR_OnEntry()
</UL>

<P><STRONG><a name="[143]"></a>Display::showS_HOT_COLDHotStatus()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(.text._ZN7Display23showS_HOT_COLDHotStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display::showS_HOT_COLDHotStatus() &rArr; ssd1306_update() &rArr; ssd1306_init() &rArr; i2c1_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawbitmap(unsigned char, unsigned char const*, unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInterruptHotCold()
</UL>

<P><STRONG><a name="[141]"></a>Display::showS_HOT_COLDColdStatus()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(.text._ZN7Display24showS_HOT_COLDColdStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display::showS_HOT_COLDColdStatus() &rArr; ssd1306_update() &rArr; ssd1306_init() &rArr; i2c1_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawbitmap(unsigned char, unsigned char const*, unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInterruptHotCold()
</UL>

<P><STRONG><a name="[142]"></a>Display::showS_HOT_COLDWarmStatus()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(.text._ZN7Display24showS_HOT_COLDWarmStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display::showS_HOT_COLDWarmStatus() &rArr; ssd1306_update() &rArr; ssd1306_init() &rArr; i2c1_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawbitmap(unsigned char, unsigned char const*, unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInterruptHotCold()
</UL>

<P><STRONG><a name="[140]"></a>Display::showS_HOT_COLDVeryColdStatus()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(.text._ZN7Display28showS_HOT_COLDVeryColdStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display::showS_HOT_COLDVeryColdStatus() &rArr; ssd1306_update() &rArr; ssd1306_init() &rArr; i2c1_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawbitmap(unsigned char, unsigned char const*, unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInterruptHotCold()
</UL>

<P><STRONG><a name="[120]"></a>Display::showS_ERROR_ERROR_DURING_GAME()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, display.o(.text._ZN7Display29showS_ERROR_ERROR_DURING_GAMEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Display::showS_ERROR_ERROR_DURING_GAME() &rArr; ssd1306_putstring(unsigned char, unsigned char, char const*) &rArr; ssd1306_putchar(char) &rArr; ssd1306_setpixel(unsigned char, unsigned char, pixel_value_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring(unsigned char, unsigned char, char const*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ERROR_OnEntry()
</UL>

<P><STRONG><a name="[34]"></a>Display::showS_HOT_COLDNotCloseAnymore()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, display.o(.text._ZN7Display29showS_HOT_COLDNotCloseAnymoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Display::showS_HOT_COLDNotCloseAnymore() &rArr; ssd1306_putstring(unsigned char, unsigned char, char const*) &rArr; ssd1306_putchar(char) &rArr; ssd1306_setpixel(unsigned char, unsigned char, pixel_value_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring(unsigned char, unsigned char, char const*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_hot_cold.o(.text._Z21timerInterruptHotColdv)
</UL>
<P><STRONG><a name="[32]"></a>Display::showS_WAYPOINT_SimonSaysPuzzlePrompt()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, display.o(.text._ZN7Display36showS_WAYPOINT_SimonSaysPuzzlePromptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Display::showS_WAYPOINT_SimonSaysPuzzlePrompt() &rArr; ssd1306_putstring(unsigned char, unsigned char, char const*) &rArr; ssd1306_putchar(char) &rArr; ssd1306_setpixel(unsigned char, unsigned char, pixel_value_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring(unsigned char, unsigned char, char const*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_waypoint.o(.text._Z18S_WAYPOINT_OnEntryv)
</UL>
<P><STRONG><a name="[33]"></a>Display::showS_WAYPOINT_SimonSaysControlsTutorial()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, display.o(.text._ZN7Display40showS_WAYPOINT_SimonSaysControlsTutorialEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display::showS_WAYPOINT_SimonSaysControlsTutorial() &rArr; ssd1306_update() &rArr; ssd1306_init() &rArr; i2c1_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_drawbitmap(unsigned char const*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_waypoint.o(.text._Z18S_WAYPOINT_OnEntryv)
</UL>
<P><STRONG><a name="[11f]"></a>Display::showS_ERROR_ERROR_SENDING_DATA_AT_S_ENDGAME()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, display.o(.text._ZN7Display43showS_ERROR_ERROR_SENDING_DATA_AT_S_ENDGAMEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Display::showS_ERROR_ERROR_SENDING_DATA_AT_S_ENDGAME() &rArr; ssd1306_putstring(unsigned char, unsigned char, char const*) &rArr; ssd1306_putchar(char) &rArr; ssd1306_setpixel(unsigned char, unsigned char, pixel_value_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring(unsigned char, unsigned char, char const*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ERROR_OnEntry()
</UL>

<P><STRONG><a name="[131]"></a>Display::showS_ENDGAMEGameEndedBecauseAllWaypointsWereReached()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, display.o(.text._ZN7Display52showS_ENDGAMEGameEndedBecauseAllWaypointsWereReachedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Display::showS_ENDGAMEGameEndedBecauseAllWaypointsWereReached() &rArr; ssd1306_putstring(unsigned char, unsigned char, char const*) &rArr; ssd1306_putchar(char) &rArr; ssd1306_setpixel(unsigned char, unsigned char, pixel_value_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_putstring(unsigned char, unsigned char, char const*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::clearScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ENDGAME_OnEntry()
</UL>

<P><STRONG><a name="[12c]"></a>Controls::setFunctionsForButtons(void (*)(), void (*)(), void (*)(), void (*)())</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, s_qrcode.o(.text._ZN8Controls22setFunctionsForButtonsEPFvvES1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Controls::setFunctionsForButtons(void (*)(), void (*)(), void (*)(), void (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_WAYPOINT_OnEntry()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SEARCH_OnEntry()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QRCODE_OnEntry()
</UL>

<P><STRONG><a name="[31]"></a>Controls::doNothing()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, s_qrcode.o(.text._ZN8Controls9doNothingEv))
<BR>[Address Reference Count : 1]<UL><LI> s_waypoint.o(.text._Z18S_WAYPOINT_OnEntryv)
</UL>
<P><STRONG><a name="[15a]"></a>GameData::InitGameData::InitGameData__sub_object()</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, main.o(.text._ZN8GameData12InitGameDataC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GameData::InitGameData::InitGameData__sub_object() &rArr; GameData::WayPoint::WayPoint__sub_object() &rArr; GPSLocation::GPSLocation__sub_object(double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameData::WayPoint::WayPoint__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>GameData::WayPoint::getLocation()</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, s_hot_cold.o(.text._ZN8GameData8WayPoint11getLocationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GameData::WayPoint::getLocation()
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptFunctionS_SEARCH()
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showDir()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_HOT_COLD_OnEntry()
</UL>

<P><STRONG><a name="[105]"></a>GameData::WayPoint::setWayPoint(GPSLocation, GameData::Puzzle)</STRONG> (Thumb, 90 bytes, Stack size 88 bytes, datamc.o(.text._ZN8GameData8WayPoint11setWayPointE11GPSLocationNS_6PuzzleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GameData::WayPoint::setWayPoint(GPSLocation, GameData::Puzzle) &rArr; GPSLocation::setCoordinates(double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::setCoordinates(double, double)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::getLongitude() const
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::getLatitude() const
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataInit()
</UL>

<P><STRONG><a name="[121]"></a>GameData::WayPoint::getIsReached()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, s_error.o(.text._ZN8GameData8WayPoint12getIsReachedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GameData::WayPoint::getIsReached()
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ERROR_OnEntry()
</UL>

<P><STRONG><a name="[144]"></a>GameData::WayPoint::setIsReached(bool)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, s_hot_cold.o(.text._ZN8GameData8WayPoint12setIsReachedEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GameData::WayPoint::setIsReached(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInterruptHotCold()
</UL>

<P><STRONG><a name="[122]"></a>GameData::WayPoint::getIsPuzzleSuccess()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, s_error.o(.text._ZN8GameData8WayPoint18getIsPuzzleSuccessEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GameData::WayPoint::getIsPuzzleSuccess()
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ERROR_OnEntry()
</UL>

<P><STRONG><a name="[15b]"></a>GameData::WayPoint::WayPoint__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, main.o(.text._ZN8GameData8WayPointC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GameData::WayPoint::WayPoint__sub_object() &rArr; GPSLocation::GPSLocation__sub_object(double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::GPSLocation__sub_object(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameData::InitGameData::InitGameData__sub_object()
</UL>

<P><STRONG><a name="[13f]"></a>GPSLocation::distanceTo(GPSLocation const&) const</STRONG> (Thumb, 352 bytes, Stack size 152 bytes, s_hot_cold.o(.text._ZNK11GPSLocation10distanceToERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GPSLocation::distanceTo(GPSLocation const&) const &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::radians(double)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptFunctionS_SEARCH()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInterruptHotCold()
</UL>

<P><STRONG><a name="[15c]"></a>GPSLocation::getLatitude() const</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, datamc.o(.text._ZNK11GPSLocation11getLatitudeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPSLocation::getLatitude() const
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameData::WayPoint::setWayPoint(GPSLocation, GameData::Puzzle)
</UL>

<P><STRONG><a name="[15d]"></a>GPSLocation::getLongitude() const</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, datamc.o(.text._ZNK11GPSLocation12getLongitudeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPSLocation::getLongitude() const
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameData::WayPoint::setWayPoint(GPSLocation, GameData::Puzzle)
</UL>

<P><STRONG><a name="[163]"></a>std::__2::default_delete&lang;SimonSaysGame&rang;::operator()[abi:v180000](SimonSaysGame*) const</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, s_waypoint.o(.text._ZNKSt3__214default_deleteI13SimonSaysGameEclB7v180000EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::__2::default_delete&lang;SimonSaysGame&rang;::operator()[abi:v180000](SimonSaysGame*) const &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;SimonSaysGame, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::reset[abi:v180000](SimonSaysGame*)
</UL>

<P><STRONG><a name="[165]"></a>std::__2::unique_ptr&lang;SimonSaysGame, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::reset[abi:v180000](SimonSaysGame*)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, s_waypoint.o(.text._ZNSt3__210unique_ptrI13SimonSaysGameNS_14default_deleteIS1_EEE5resetB7v180000EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::__2::unique_ptr&lang;SimonSaysGame, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::reset[abi:v180000](SimonSaysGame*) &rArr; std::__2::default_delete&lang;SimonSaysGame&rang;::operator()[abi:v180000](SimonSaysGame*) const &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::default_delete&lang;SimonSaysGame&rang;::operator()[abi:v180000](SimonSaysGame*) const
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;SimonSaysGame*, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::second[abi:v180000]()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;SimonSaysGame*, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::first[abi:v180000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;SimonSaysGame, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::~unique_ptr__sub_object[abi:v180000]()
</UL>

<P><STRONG><a name="[168]"></a>std::__2::unique_ptr&lang;SimonSaysGame, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::unique_ptr__sub_object[abi:v180000]&lang;true, void&rang;(SimonSaysGame*)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, s_waypoint.o(.text._ZNSt3__210unique_ptrI13SimonSaysGameNS_14default_deleteIS1_EEEC2B7v180000ILb1EvEEPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std::__2::unique_ptr&lang;SimonSaysGame, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::unique_ptr__sub_object[abi:v180000]&lang;true, void&rang;(SimonSaysGame*) &rArr; std::__2::__compressed_pair&lang;SimonSaysGame*, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::__compressed_pair__sub_object[abi:v180000]&lang;SimonSaysGame*&, std::__2::__value_init_tag&rang;(SimonSaysGame*&, std::__2::__value_init_tag&&) &rArr; std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;SimonSaysGame&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:v180000](std::__2::__value_init_tag)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;SimonSaysGame*, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::__compressed_pair__sub_object[abi:v180000]&lang;SimonSaysGame*&, std::__2::__value_init_tag&rang;(SimonSaysGame*&, std::__2::__value_init_tag&&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[3b]"></a>std::__2::unique_ptr&lang;SimonSaysGame, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::~unique_ptr__sub_object[abi:v180000]()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, s_waypoint.o(.text._ZNSt3__210unique_ptrI13SimonSaysGameNS_14default_deleteIS1_EEED2B7v180000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::__2::unique_ptr&lang;SimonSaysGame, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::~unique_ptr__sub_object[abi:v180000]() &rArr; std::__2::unique_ptr&lang;SimonSaysGame, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::reset[abi:v180000](SimonSaysGame*) &rArr; std::__2::default_delete&lang;SimonSaysGame&rang;::operator()[abi:v180000](SimonSaysGame*) const &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;SimonSaysGame, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::reset[abi:v180000](SimonSaysGame*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_waypoint.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[166]"></a>std::__2::__compressed_pair&lang;SimonSaysGame*, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::first[abi:v180000]()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, s_waypoint.o(.text._ZNSt3__217__compressed_pairIP13SimonSaysGameNS_14default_deleteIS1_EEE5firstB7v180000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::__compressed_pair&lang;SimonSaysGame*, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::first[abi:v180000]() &rArr; std::__2::__compressed_pair_elem&lang;SimonSaysGame*, 0, false&rang;::__get[abi:v180000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair_elem&lang;SimonSaysGame*, 0, false&rang;::__get[abi:v180000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;SimonSaysGame, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::reset[abi:v180000](SimonSaysGame*)
</UL>

<P><STRONG><a name="[167]"></a>std::__2::__compressed_pair&lang;SimonSaysGame*, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::second[abi:v180000]()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, s_waypoint.o(.text._ZNSt3__217__compressed_pairIP13SimonSaysGameNS_14default_deleteIS1_EEE6secondB7v180000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::__compressed_pair&lang;SimonSaysGame*, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::second[abi:v180000]() &rArr; std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;SimonSaysGame&rang;, 1, true&rang;::__get[abi:v180000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;SimonSaysGame&rang;, 1, true&rang;::__get[abi:v180000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;SimonSaysGame, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::reset[abi:v180000](SimonSaysGame*)
</UL>

<P><STRONG><a name="[169]"></a>std::__2::__compressed_pair&lang;SimonSaysGame*, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::__compressed_pair__sub_object[abi:v180000]&lang;SimonSaysGame*&, std::__2::__value_init_tag&rang;(SimonSaysGame*&, std::__2::__value_init_tag&&)</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, s_waypoint.o(.text._ZNSt3__217__compressed_pairIP13SimonSaysGameNS_14default_deleteIS1_EEEC2B7v180000IRS2_NS_16__value_init_tagEEEOT_OT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::__2::__compressed_pair&lang;SimonSaysGame*, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::__compressed_pair__sub_object[abi:v180000]&lang;SimonSaysGame*&, std::__2::__value_init_tag&rang;(SimonSaysGame*&, std::__2::__value_init_tag&&) &rArr; std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;SimonSaysGame&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:v180000](std::__2::__value_init_tag)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;SimonSaysGame&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:v180000](std::__2::__value_init_tag)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair_elem&lang;SimonSaysGame*, 0, false&rang;::__compressed_pair_elem__sub_object[abi:v180000]&lang;SimonSaysGame*&, void&rang;(SimonSaysGame*&)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;SimonSaysGame, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::unique_ptr__sub_object[abi:v180000]&lang;true, void&rang;(SimonSaysGame*)
</UL>

<P><STRONG><a name="[170]"></a>std::__2::__convert_to_integral[abi:v180000](unsigned int)</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, s_waypoint.o(.text._ZNSt3__221__convert_to_integralB7v180000Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::__convert_to_integral[abi:v180000](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::Direction* std::__2::fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&)
</UL>

<P><STRONG><a name="[16b]"></a>std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;SimonSaysGame&rang;, 1, true&rang;::__get[abi:v180000]()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, s_waypoint.o(.text._ZNSt3__222__compressed_pair_elemINS_14default_deleteI13SimonSaysGameEELi1ELb1EE5__getB7v180000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;SimonSaysGame&rang;, 1, true&rang;::__get[abi:v180000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;SimonSaysGame*, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::second[abi:v180000]()
</UL>

<P><STRONG><a name="[16d]"></a>std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;SimonSaysGame&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:v180000](std::__2::__value_init_tag)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, s_waypoint.o(.text._ZNSt3__222__compressed_pair_elemINS_14default_deleteI13SimonSaysGameEELi1ELb1EEC2B7v180000ENS_16__value_init_tagE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;SimonSaysGame&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:v180000](std::__2::__value_init_tag)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;SimonSaysGame*, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::__compressed_pair__sub_object[abi:v180000]&lang;SimonSaysGame*&, std::__2::__value_init_tag&rang;(SimonSaysGame*&, std::__2::__value_init_tag&&)
</UL>

<P><STRONG><a name="[16a]"></a>std::__2::__compressed_pair_elem&lang;SimonSaysGame*, 0, false&rang;::__get[abi:v180000]()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, s_waypoint.o(.text._ZNSt3__222__compressed_pair_elemIP13SimonSaysGameLi0ELb0EE5__getB7v180000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::__compressed_pair_elem&lang;SimonSaysGame*, 0, false&rang;::__get[abi:v180000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;SimonSaysGame*, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::first[abi:v180000]()
</UL>

<P><STRONG><a name="[16c]"></a>std::__2::__compressed_pair_elem&lang;SimonSaysGame*, 0, false&rang;::__compressed_pair_elem__sub_object[abi:v180000]&lang;SimonSaysGame*&, void&rang;(SimonSaysGame*&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, s_waypoint.o(.text._ZNSt3__222__compressed_pair_elemIP13SimonSaysGameLi0ELb0EEC2B7v180000IRS2_vEEOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::__compressed_pair_elem&lang;SimonSaysGame*, 0, false&rang;::__compressed_pair_elem__sub_object[abi:v180000]&lang;SimonSaysGame*&, void&rang;(SimonSaysGame*&)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;SimonSaysGame*, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::__compressed_pair__sub_object[abi:v180000]&lang;SimonSaysGame*&, std::__2::__value_init_tag&rang;(SimonSaysGame*&, std::__2::__value_init_tag&&)
</UL>

<P><STRONG><a name="[16e]"></a>std::__2::array&lang;GPSLocation::Direction, 10u&rang;::data[abi:v180000]()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, s_waypoint.o(.text._ZNSt3__25arrayIN11GPSLocation9DirectionELj10EE4dataB7v180000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::array&lang;GPSLocation::Direction, 10u&rang;::data[abi:v180000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;GPSLocation::Direction, 10u&rang;::fill[abi:v180000](GPSLocation::Direction const&)
</UL>

<P><STRONG><a name="[153]"></a>std::__2::array&lang;GPSLocation::Direction, 10u&rang;::fill[abi:v180000](GPSLocation::Direction const&)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, s_waypoint.o(.text._ZNSt3__25arrayIN11GPSLocation9DirectionELj10EE4fillB7v180000ERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = std::__2::array&lang;GPSLocation::Direction, 10u&rang;::fill[abi:v180000](GPSLocation::Direction const&) &rArr; GPSLocation::Direction* std::__2::fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&) &rArr; GPSLocation::Direction* std::__2::__fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::Direction* std::__2::fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;GPSLocation::Direction, 10u&rang;::data[abi:v180000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimonSaysGame::initDirs()
</UL>

<P><STRONG><a name="[155]"></a>std::__2::array&lang;GPSLocation::Direction, 10u&rang;::operator[][abi:v180000](unsigned int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, s_waypoint.o(.text._ZNSt3__25arrayIN11GPSLocation9DirectionELj10EEixB7v180000Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::array&lang;GPSLocation::Direction, 10u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimonSaysGame::initDirs()
</UL>

<P><STRONG><a name="[14c]"></a>std::__2::__math::fabs[abi:v180000](float)</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, s_search.o(.text._ZNSt3__26__math4fabsB7v180000Ef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::__math::fabs[abi:v180000](float)
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::getDirection(GPSLocation const&)
</UL>

<P><STRONG><a name="[16f]"></a>GPSLocation::Direction* std::__2::fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, s_waypoint.o(.text._ZNSt3__26fill_nB7v180000IPN11GPSLocation9DirectionEjS2_EET_S4_T0_RKT1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPSLocation::Direction* std::__2::fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&) &rArr; GPSLocation::Direction* std::__2::__fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::Direction* std::__2::__fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__convert_to_integral[abi:v180000](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;GPSLocation::Direction, 10u&rang;::fill[abi:v180000](GPSLocation::Direction const&)
</UL>

<P><STRONG><a name="[171]"></a>GPSLocation::Direction* std::__2::__fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&)</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, s_waypoint.o(.text._ZNSt3__28__fill_nB7v180000IPN11GPSLocation9DirectionEjS2_EET_S4_T0_RKT1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPSLocation::Direction* std::__2::__fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::Direction* std::__2::fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&)
</UL>

<P><STRONG><a name="[173]"></a>std::get_new_handler()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt15get_new_handlerv))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[164]"></a>operator delete(void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::default_delete&lang;SimonSaysGame&rang;::operator()[abi:v180000](SimonSaysGame*) const
</UL>

<P><STRONG><a name="[172]"></a>operator new(unsigned int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, new.cpp.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[ee]"></a>gps</STRONG> (Thumb, 452 bytes, Stack size 376 bytes, gps.o(.text.gps))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = gps &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_receive_data
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_flush
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User::getUsersCurrentLocation()
</UL>

<P><STRONG><a name="[134]"></a>gps_init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, gps.o(.text.gps_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gps_init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeModules()
</UL>

<P><STRONG><a name="[174]"></a>gps_receive_data</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, gps.o(.text.gps_receive_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gps_receive_data &rArr; q_dequeue &rArr; q_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_dequeue
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_size
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps
</UL>

<P><STRONG><a name="[f7]"></a>i2c0_init</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, i2c0.o(.text.i2c0_init))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_init()
</UL>

<P><STRONG><a name="[f9]"></a>i2c0_read</STRONG> (Thumb, 460 bytes, Stack size 36 bytes, i2c0.o(.text.i2c0_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = i2c0_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read(unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[109]"></a>i2c0_write</STRONG> (Thumb, 320 bytes, Stack size 36 bytes, i2c0.o(.text.i2c0_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = i2c0_write
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write(unsigned short, unsigned char const*, unsigned short)
</UL>

<P><STRONG><a name="[10e]"></a>i2c1_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, i2c1.o(.text.i2c1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_init()
</UL>

<P><STRONG><a name="[10f]"></a>i2c1_write_cmd</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, i2c1.o(.text.i2c1_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c1_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_setorientation(unsigned char)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_init()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
</UL>

<P><STRONG><a name="[11a]"></a>i2c1_write_data</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, i2c1.o(.text.i2c1_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c1_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_update()
</UL>

<P><STRONG><a name="[7d]"></a>main</STRONG> (Thumb, 80 bytes, Stack size 408 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 33380 + Unknown Stack Size
<LI>Call Chain = main &rArr; statemachine::StateMachine::transition(statemachine::Event) &rArr; statemachine::StateMachine::invokeOnEntry(statemachine::State) &rArr; S_ENDGAME_OnEntry() &rArr;  statemachine::StateMachine::transition(statemachine::Event) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameData::InitGameData::InitGameData__sub_object()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User::User__sub_object()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statemachine::StateMachine::transition(statemachine::Event)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[176]"></a>number</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gps.o(.text.number))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = number
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps
</UL>

<P><STRONG><a name="[f1]"></a>q_dequeue</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, queue.o(.text.q_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = q_dequeue &rArr; q_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_receive_data
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_get_char
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_get_string
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[17f]"></a>q_empty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, queue.o(.text.q_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = q_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_flush
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_dequeue
</UL>

<P><STRONG><a name="[f2]"></a>q_enqueue</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, queue.o(.text.q_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = q_enqueue &rArr; q_full
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_full
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_put_char
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_send_string
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>q_flush</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, queue.o(.text.q_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = q_flush &rArr; q_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps
</UL>

<P><STRONG><a name="[180]"></a>q_full</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, queue.o(.text.q_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = q_full
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_enqueue
</UL>

<P><STRONG><a name="[17c]"></a>q_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, queue.o(.text.q_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = q_init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[17d]"></a>q_size</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, queue.o(.text.q_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = q_size
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_receive_data
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_num_rx_chars_available
</UL>

<P><STRONG><a name="[132]"></a>servo_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, servo.o(.text.servo_init))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeModules()
</UL>

<P><STRONG><a name="[102]"></a>uart0_get_char</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uart0.o(.text.uart0_get_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = uart0_get_char &rArr; q_dequeue &rArr; q_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_num_rx_chars_available
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataReturn()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataInit()
</UL>

<P><STRONG><a name="[100]"></a>uart0_get_string</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, uart0.o(.text.uart0_get_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uart0_get_string &rArr; q_dequeue &rArr; q_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_num_rx_chars_available
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataInit()
</UL>

<P><STRONG><a name="[133]"></a>uart0_init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, uart0.o(.text.uart0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart0_init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeModules()
</UL>

<P><STRONG><a name="[fc]"></a>uart0_num_rx_chars_available</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart0.o(.text.uart0_num_rx_chars_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart0_num_rx_chars_available &rArr; q_size
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_size
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataReturn()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataInit()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_get_char
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_get_string
</UL>

<P><STRONG><a name="[fb]"></a>uart0_put_char</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart0.o(.text.uart0_put_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = uart0_put_char &rArr; q_enqueue &rArr; q_full
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataReturn()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataInit()
</UL>

<P><STRONG><a name="[113]"></a>uart0_send_string</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, uart0.o(.text.uart0_send_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = uart0_send_string &rArr; q_enqueue &rArr; q_full
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataReturn()
</UL>

<P><STRONG><a name="[e0]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[c9]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[183]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 838 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[187]"></a>__kernel_cos</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[188]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[189]"></a>__kernel_sin</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[18b]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[18c]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[18d]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[18e]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[18a]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[de]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[18f]"></a>__mathlib_tofloat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[e9]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(i._deq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptFunctionS_SEARCH()
</UL>

<P><STRONG><a name="[194]"></a>_deq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dcmp.o(i._deq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(i._dgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataInit()
</UL>

<P><STRONG><a name="[196]"></a>_dgr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dcmp.o(i._dgr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(i._dleq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptFunctionS_SEARCH()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInterruptHotCold()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataInit()
</UL>

<P><STRONG><a name="[198]"></a>_dleq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dcmp.o(i._dleq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(i._dls))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInterruptHotCold()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataReturn()
</UL>

<P><STRONG><a name="[19a]"></a>_dls</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dcmp.o(i._dls), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_fcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(i._fleq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::getDirection(GPSLocation const&)
</UL>

<P><STRONG><a name="[19b]"></a>_fleq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fcmp.o(i._fleq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[b7]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[19d]"></a>atan</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[162]"></a>atan2</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::distanceTo(GPSLocation const&) const
</UL>

<P><STRONG><a name="[177]"></a>atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps
</UL>

<P><STRONG><a name="[15f]"></a>cos</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::distanceTo(GPSLocation const&) const
</UL>

<P><STRONG><a name="[190]"></a>frexp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[193]"></a>ldexp</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ldexp &rArr; __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[15e]"></a>sin</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::distanceTo(GPSLocation const&) const
</UL>

<P><STRONG><a name="[161]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sqrt &rArr; _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::distanceTo(GPSLocation const&) const
</UL>

<P><STRONG><a name="[103]"></a>strtod</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User::getUsersCurrentLocation()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameDataInit()
</UL>

<P><STRONG><a name="[2a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[191]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[195]"></a>_dcmpeq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[197]"></a>_dcmpge</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dgef.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[1e6]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[199]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[192]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[1a0]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[1e7]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[19c]"></a>_fcmple</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fleq
</UL>

<P><STRONG><a name="[4f]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[53]"></a>_printf_fp_hex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[bb]"></a>_scanf_real</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[dd]"></a>_scanf_hex_real</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[dc]"></a>_scanf_infnan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[181]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, uart0.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[f0]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, uart0.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[182]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, uart0.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[f4]"></a>__cxx_global_var_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, s_hot_cold.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __cxx_global_var_init &rArr; GPSLocation::GPSLocation__sub_object(double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSLocation::GPSLocation__sub_object(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_S_HOT_COLD.cpp
</UL>

<P><STRONG><a name="[41]"></a>_GLOBAL__sub_I_S_HOT_COLD.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, s_hot_cold.o(.text._GLOBAL__sub_I_S_HOT_COLD.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _GLOBAL__sub_I_S_HOT_COLD.cpp &rArr; __cxx_global_var_init &rArr; GPSLocation::GPSLocation__sub_object(double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_hot_cold.o(.init_array)
</UL>
<P><STRONG><a name="[f5]"></a>__cxx_global_var_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, s_waypoint.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = __cxx_global_var_init &rArr; SimonSaysGame::SimonSaysGame__sub_object(int) &rArr; SimonSaysGame::initDirs() &rArr; std::__2::array&lang;GPSLocation::Direction, 10u&rang;::fill[abi:v180000](GPSLocation::Direction const&) &rArr; GPSLocation::Direction* std::__2::fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&) &rArr; GPSLocation::Direction* std::__2::__fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;SimonSaysGame, std::__2::default_delete&lang;SimonSaysGame&rang;&rang;::unique_ptr__sub_object[abi:v180000]&lang;true, void&rang;(SimonSaysGame*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimonSaysGame::SimonSaysGame__sub_object(int)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_S_WAYPOINT.cpp
</UL>

<P><STRONG><a name="[42]"></a>_GLOBAL__sub_I_S_WAYPOINT.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, s_waypoint.o(.text._GLOBAL__sub_I_S_WAYPOINT.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _GLOBAL__sub_I_S_WAYPOINT.cpp &rArr; __cxx_global_var_init &rArr; SimonSaysGame::SimonSaysGame__sub_object(int) &rArr; SimonSaysGame::initDirs() &rArr; std::__2::array&lang;GPSLocation::Direction, 10u&rang;::fill[abi:v180000](GPSLocation::Direction const&) &rArr; GPSLocation::Direction* std::__2::fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&) &rArr; GPSLocation::Direction* std::__2::__fill_n[abi:v180000]&lang;GPSLocation::Direction*, unsigned int, GPSLocation::Direction&rang;(GPSLocation::Direction*, unsigned int, GPSLocation::Direction const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_waypoint.o(.init_array)
</UL>
<P><STRONG><a name="[10b]"></a>__NVIC_SetPriority(IRQn, unsigned int)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, delay.o(.text._ZL18__NVIC_SetPriority4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority(IRQn, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_setup()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_setup()
</UL>

<P><STRONG><a name="[eb]"></a>__NVIC_ClearPendingIRQ(IRQn)</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, delay.o(.text._ZL22__NVIC_ClearPendingIRQ4IRQn))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_setup()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_setup()
</UL>

<P><STRONG><a name="[10c]"></a>__NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, delay.o(.text._ZL16__NVIC_EnableIRQ4IRQn))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_setup()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_setup()
</UL>

<P><STRONG><a name="[17a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, gps.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
</UL>

<P><STRONG><a name="[f3]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gps.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
</UL>

<P><STRONG><a name="[17b]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gps.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
</UL>

<P><STRONG><a name="[97]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[96]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>_local_sscanf</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[c4]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[d8]"></a>_fp_value</STRONG> (Thumb, 602 bytes, Stack size 80 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[df]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[e1]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[e2]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[cd]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[cf]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
